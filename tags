!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/lugot/documents/university/master/thesis/code/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
$(LIBUTILS)	src/Makefile	/^$(LIBUTILS) : $(HEADERS_LIBUTILS)$/;"	t
$(LIBUTILS)	src/Makefile	/^$(LIBUTILS): $(OBJS_LIBUTILS)$/;"	t
$(OBJS)	src/Makefile	/^$(OBJS) : $(HEADERS)$/;"	t
$(TARGET)	src/Makefile	/^$(TARGET): $(OBJS) $(LIBUTILS)$/;"	t
.c.o	src/Makefile	/^.c.o :$/;"	t
.cc.o	src/Makefile	/^.cc.o :$/;"	t
.cpp.o	src/Makefile	/^.cpp.o :$/;"	t
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:0.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:1.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:2.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:3.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:4.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:5.arguments
0	compile_commands.json	/^      "\/usr\/bin\/g++",$/;"	s	array:6.arguments
0	compile_commands.json	/^  {$/;"	o
1	compile_commands.json	/^      "-Wall",$/;"	s	array:0.arguments
1	compile_commands.json	/^      "-Wall",$/;"	s	array:1.arguments
1	compile_commands.json	/^      "-Wall",$/;"	s	array:2.arguments
1	compile_commands.json	/^      "-Wall",$/;"	s	array:3.arguments
1	compile_commands.json	/^      "-Wall",$/;"	s	array:4.arguments
1	compile_commands.json	/^      "-Wall",$/;"	s	array:5.arguments
1	compile_commands.json	/^      "-Wall",$/;"	s	array:6.arguments
1	compile_commands.json	/^  {$/;"	o
10	compile_commands.json	/^      "cplex_instance.cc"$/;"	s	array:3.arguments
10	compile_commands.json	/^      "instance.cc"$/;"	s	array:2.arguments
10	compile_commands.json	/^      "logger.cc"$/;"	s	array:1.arguments
10	compile_commands.json	/^      "main.cc"$/;"	s	array:0.arguments
10	compile_commands.json	/^      "sparse_matrix.cc"$/;"	s	array:5.arguments
10	compile_commands.json	/^      "sparse_vector.cc"$/;"	s	array:6.arguments
10	compile_commands.json	/^      "subgradient_instance.cc"$/;"	s	array:4.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:0.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:1.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:2.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:3.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:4.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:5.arguments
2	compile_commands.json	/^      "-O0",$/;"	s	array:6.arguments
2	compile_commands.json	/^  {$/;"	o
3	compile_commands.json	/^      "-g",$/;"	s	array:0.arguments
3	compile_commands.json	/^      "-g",$/;"	s	array:1.arguments
3	compile_commands.json	/^      "-g",$/;"	s	array:2.arguments
3	compile_commands.json	/^      "-g",$/;"	s	array:3.arguments
3	compile_commands.json	/^      "-g",$/;"	s	array:4.arguments
3	compile_commands.json	/^      "-g",$/;"	s	array:5.arguments
3	compile_commands.json	/^      "-g",$/;"	s	array:6.arguments
3	compile_commands.json	/^  {$/;"	o
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:0.arguments
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:1.arguments
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:2.arguments
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:3.arguments
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:4.arguments
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:5.arguments
4	compile_commands.json	/^      "-I..\/include",$/;"	s	array:6.arguments
4	compile_commands.json	/^  {$/;"	o
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:0.arguments
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:1.arguments
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:2.arguments
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:3.arguments
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:4.arguments
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:5.arguments
5	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/cplex\/include",$/;"	s	array:6.arguments
5	compile_commands.json	/^  {$/;"	o
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:0.arguments
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:1.arguments
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:2.arguments
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:3.arguments
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:4.arguments
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:5.arguments
6	compile_commands.json	/^      "-I\/opt\/ibm\/ILOG\/CPLEX_Studio201\/concert\/include",$/;"	s	array:6.arguments
6	compile_commands.json	/^  {$/;"	o
7	compile_commands.json	/^      "-c",$/;"	s	array:0.arguments
7	compile_commands.json	/^      "-c",$/;"	s	array:1.arguments
7	compile_commands.json	/^      "-c",$/;"	s	array:2.arguments
7	compile_commands.json	/^      "-c",$/;"	s	array:3.arguments
7	compile_commands.json	/^      "-c",$/;"	s	array:4.arguments
7	compile_commands.json	/^      "-c",$/;"	s	array:5.arguments
7	compile_commands.json	/^      "-c",$/;"	s	array:6.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:0.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:1.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:2.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:3.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:4.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:5.arguments
8	compile_commands.json	/^      "-o",$/;"	s	array:6.arguments
9	compile_commands.json	/^      "cplex_instance.o",$/;"	s	array:3.arguments
9	compile_commands.json	/^      "instance.o",$/;"	s	array:2.arguments
9	compile_commands.json	/^      "logger.o",$/;"	s	array:1.arguments
9	compile_commands.json	/^      "main.o",$/;"	s	array:0.arguments
9	compile_commands.json	/^      "sparse_matrix.o",$/;"	s	array:5.arguments
9	compile_commands.json	/^      "sparse_vector.o",$/;"	s	array:6.arguments
9	compile_commands.json	/^      "subgradient_instance.o",$/;"	s	array:4.arguments
A	include/subgradient_instance.h	/^    SparseMatrix A;$/;"	m	class:SubgradientInstance	typeref:typename:SparseMatrix
AR	src/Makefile	/^AR = ar rc$/;"	m
CC	src/Makefile	/^CC = g++$/;"	m
CPLEX_HOME	src/Makefile	/^CPLEX_HOME = \/opt\/ibm\/ILOG\/CPLEX_Studio201$/;"	m
CmdLineParser	src/profiler.py	/^class CmdLineParser(object):$/;"	c
Conditional	include/subgradient_instance.h	/^        Conditional,$/;"	e	enum:SubgradientInstance::Methods
CplexInstance	include/cplex_instance.h	/^class CplexInstance : public Instance {$/;"	c
CplexInstance	src/cplex_instance.cc	/^CplexInstance::CplexInstance() : Instance() {}$/;"	f	class:CplexInstance
CplexInstance	src/cplex_instance.cc	/^CplexInstance::CplexInstance(const CplexInstance& other) {$/;"	f	class:CplexInstance
CplexInstance	src/cplex_instance.cc	/^CplexInstance::CplexInstance(const std::string& filename) : Instance() {$/;"	f	class:CplexInstance
DELIM	src/globals.cc	/^char DELIM = ',';$/;"	v	typeref:typename:char
Deflected	include/subgradient_instance.h	/^        Deflected,$/;"	e	enum:SubgradientInstance::Methods
EPS	include/globals.h	/^#define EPS /;"	d
EQUAL	include/subgradient_instance.h	/^    enum Sense { GREATER, EQUAL, LESS };$/;"	e	enum:SubgradientInstance::Sense
EXTRA	src/globals.cc	/^bool EXTRA = false;$/;"	v	typeref:typename:bool
EmptyInstance	include/instance.h	/^        EmptyInstance,$/;"	e	enum:Instance::SolutionStatus
EpsilonOptimal	include/subgradient_instance.h	/^        EpsilonOptimal$/;"	e	enum:SubgradientInstance::Status
Error	include/instance.h	/^        Error,$/;"	e	enum:Instance::SolutionStatus
Error	include/subgradient_instance.h	/^        Error,$/;"	e	enum:SubgradientInstance::Status
Feasible	include/instance.h	/^        Feasible,$/;"	e	enum:Instance::SolutionStatus
GREATER	include/subgradient_instance.h	/^    enum Sense { GREATER, EQUAL, LESS };$/;"	e	enum:SubgradientInstance::Sense
HARD_LAMBDA_TRESHOLD	include/globals.h	/^#define HARD_LAMBDA_TRESHOLD /;"	d
HEADERS	src/Makefile	/^HEADERS =$/;"	m
Hybrid	include/subgradient_instance.h	/^        Hybrid,$/;"	e	enum:SubgradientInstance::Methods
IMHERE	include/globals.h	/^#define IMHERE /;"	d
INC	src/Makefile	/^INC = -I..\/include -I${CPLEX_HOME}\/cplex\/include -I${CPLEX_HOME}\/concert\/include$/;"	m
INCLUDE_CPLEX_INSTANCE_H_	include/cplex_instance.h	/^#define INCLUDE_CPLEX_INSTANCE_H_$/;"	d
INCLUDE_GLOBALS_H_	include/globals.h	/^#define INCLUDE_GLOBALS_H_$/;"	d
INCLUDE_INSTANCE_H_	include/instance.h	/^#define INCLUDE_INSTANCE_H_$/;"	d
INCLUDE_LOGLINE_H_	include/logline.h	/^#define INCLUDE_LOGLINE_H_$/;"	d
INCLUDE_SPARSE_MATRIX_H_	include/sparse_matrix.h	/^#define INCLUDE_SPARSE_MATRIX_H_$/;"	d
INCLUDE_SPARSE_VECTOR_H_	include/sparse_vector.h	/^#define INCLUDE_SPARSE_VECTOR_H_$/;"	d
INCLUDE_SUBGRADIENT_INSTANCE_H_	include/subgradient_instance.h	/^#define INCLUDE_SUBGRADIENT_INSTANCE_H_$/;"	d
INCLUDE_UTILS_H_	include/utils.h	/^#define INCLUDE_UTILS_H_$/;"	d
INF	include/globals.h	/^#define INF /;"	d
ITERINFO	src/globals.cc	/^int ITERINFO = 2e9;$/;"	v	typeref:typename:int
Infeasible	include/instance.h	/^        Infeasible,$/;"	e	enum:Instance::SolutionStatus
InfeasibleOrUnbounded	include/instance.h	/^        InfeasibleOrUnbounded,$/;"	e	enum:Instance::SolutionStatus
Instance	include/instance.h	/^class Instance {$/;"	c
Instance	src/instance.cc	/^Instance::Instance() { status = SolutionStatus::NeverSolved; }$/;"	f	class:Instance
LESS	include/subgradient_instance.h	/^    enum Sense { GREATER, EQUAL, LESS };$/;"	e	enum:SubgradientInstance::Sense
LIBS	src/Makefile	/^LIBS = -L${CPLEX_HOME}\/cplex\/lib\/x86-64_linux\/static_pic -L${CPLEX_HOME}\/concert\/lib\/x86-/;"	m
LOGGING	src/globals.cc	/^bool LOGGING = false;$/;"	v	typeref:typename:bool
LOWERBOUND	include/globals.h	/^#define LOWERBOUND /;"	d
LogLine	include/logline.h	/^    LogLine() {$/;"	f	class:LogLine
LogLine	include/logline.h	/^    LogLine(char delim, bool fancy) {$/;"	f	class:LogLine
LogLine	include/logline.h	/^class LogLine {$/;"	c
LowLambdaHard	include/subgradient_instance.h	/^        LowLambdaHard,$/;"	e	enum:SubgradientInstance::Status
LowLambdaSoft	include/subgradient_instance.h	/^        LowLambdaSoft,$/;"	e	enum:SubgradientInstance::Status
MAXITER	src/globals.cc	/^int MAXITER = 10;$/;"	v	typeref:typename:int
MU_MAX	include/globals.h	/^#define MU_MAX /;"	d
MU_MIN	include/globals.h	/^#define MU_MIN /;"	d
Methods	include/subgradient_instance.h	/^    enum class Methods {$/;"	g	class:SubgradientInstance
ModelChanged	include/instance.h	/^        ModelChanged,$/;"	e	enum:Instance::SolutionStatus
NeverSolved	include/instance.h	/^        NeverSolved,$/;"	e	enum:Instance::SolutionStatus
NeverSolved	include/subgradient_instance.h	/^        NeverSolved,$/;"	e	enum:SubgradientInstance::Status
OBJS	src/Makefile	/^OBJS = globals.o main.o instance.o cplex_instance.o subgradient_instance.o sparse_matrix.o spars/;"	m
Optimal	include/instance.h	/^        Optimal,$/;"	e	enum:Instance::SolutionStatus
Optimal	include/subgradient_instance.h	/^        Optimal,$/;"	e	enum:SubgradientInstance::Status
P	include/globals.h	/^#define P /;"	d
Pure	include/subgradient_instance.h	/^        Pure,$/;"	e	enum:SubgradientInstance::Methods
RM	src/Makefile	/^RM = rm -rf$/;"	m
ReachedMaxIterations	include/subgradient_instance.h	/^        ReachedMaxIterations,$/;"	e	enum:SubgradientInstance::Status
ReachedTimelimit	include/subgradient_instance.h	/^        ReachedTimelimit,$/;"	e	enum:SubgradientInstance::Status
SOFT_LAMBDA_MAXLIFE	include/globals.h	/^#define SOFT_LAMBDA_MAXLIFE /;"	d
SOFT_LAMBDA_TRESHOLD	include/globals.h	/^#define SOFT_LAMBDA_TRESHOLD /;"	d
Sense	include/subgradient_instance.h	/^    enum Sense { GREATER, EQUAL, LESS };$/;"	g	class:SubgradientInstance
SolutionStatus	include/instance.h	/^    enum class SolutionStatus {$/;"	g	class:Instance
SparseMatrix	include/sparse_matrix.h	/^class SparseMatrix {$/;"	c
SparseMatrix	src/sparse_matrix.cc	/^SparseMatrix::SparseMatrix(int nrows, int ncols) {$/;"	f	class:SparseMatrix
SparseVector	include/sparse_vector.h	/^class SparseVector {$/;"	c
SparseVector	src/sparse_vector.cc	/^SparseVector::SparseVector(int size) {$/;"	f	class:SparseVector
Status	include/subgradient_instance.h	/^    enum class Status {$/;"	g	class:SubgradientInstance
SubgradientInstance	include/subgradient_instance.h	/^class SubgradientInstance {$/;"	c
SubgradientInstance	src/subgradient_instance.cc	/^SubgradientInstance::SubgradientInstance(const CplexInstance& cinst) {$/;"	f	class:SubgradientInstance
TARGET	src/Makefile	/^TARGET = thesis$/;"	m
TAU	include/globals.h	/^#define TAU /;"	d
TIMILIMIT	src/globals.cc	/^int TIMILIMIT = -1;$/;"	v	typeref:typename:int
UPPERBOUND	include/globals.h	/^#define UPPERBOUND /;"	d
Unbounded	include/instance.h	/^        Unbounded,$/;"	e	enum:Instance::SolutionStatus
Unknown	include/instance.h	/^        Unknown,$/;"	e	enum:Instance::SolutionStatus
VERBOSE	src/globals.cc	/^bool VERBOSE = false;$/;"	v	typeref:typename:bool
__anon804d739c0102	src/subgradient_instance.cc	/^                               [&u, this](const std::pair<int, double>& p) {$/;"	f	function:SubgradientInstance::solveHybrid	file:
__anon804d739c0202	src/subgradient_instance.cc	/^                           [&u](const std::pair<int, double>& p) {$/;"	f	function:SubgradientInstance::solveHybrid	file:
__anon804d739c0302	src/subgradient_instance.cc	/^                                    [this](const std::pair<int, double>& p) {$/;"	f	function:SubgradientInstance::solveHybrid	file:
__anonb99be2300102	src/sparse_vector.cc	/^                          [](const std::pair<int, double>& p, int target) {$/;"	f	function:SparseVector::isZero	file:
__anonb99be2300202	src/sparse_vector.cc	/^                              [tollerance](const std::pair<int, double>& p) {$/;"	f	function:SparseVector::prune	file:
__init__	src/profiler.py	/^	def __init__(self):$/;"	m	class:CmdLineParser
addOption	src/profiler.py	/^	def addOption(self, *args, **kwargs):$/;"	m	class:CmdLineParser
addRow	src/sparse_matrix.cc	/^void SparseMatrix::addRow($/;"	f	class:SparseMatrix	typeref:typename:void
again	src/Makefile	/^again:$/;"	t
all	src/Makefile	/^all: $(TARGET)$/;"	t
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:0
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:1
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:2
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:3
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:4
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:5
arguments	compile_commands.json	/^    "arguments": [$/;"	a	object:6
b	include/subgradient_instance.h	/^    SparseVector c, b;$/;"	m	class:SubgradientInstance	typeref:typename:SparseVector
best_ustar	include/subgradient_instance.h	/^    SparseVector best_ustar, best_xstar;$/;"	m	class:SubgradientInstance	typeref:typename:SparseVector
best_xstar	include/subgradient_instance.h	/^    SparseVector best_ustar, best_xstar;$/;"	m	class:SubgradientInstance	typeref:typename:SparseVector
bestsol_avaiable	include/subgradient_instance.h	/^    bool bestsol_avaiable;$/;"	m	class:SubgradientInstance	typeref:typename:bool
c	include/subgradient_instance.h	/^    SparseVector c, b;$/;"	m	class:SubgradientInstance	typeref:typename:SparseVector
clean	src/Makefile	/^clean:$/;"	t
colors	src/profiler.py	/^colors = ['r', 'b', 'y', 'g', 'm', 'c']$/;"	v
cols	include/sparse_matrix.h	/^    std::vector<SparseVector> rows, cols;$/;"	m	class:SparseMatrix	typeref:typename:std::vector<SparseVector>
constraintSense	src/subgradient_instance.cc	/^SubgradientInstance::Sense SubgradientInstance::constraintSense($/;"	f	class:SubgradientInstance	typeref:typename:SubgradientInstance::Sense
cplex	include/cplex_instance.h	/^    IloCplex cplex;$/;"	m	class:CplexInstance	typeref:typename:IloCplex
dashes	src/profiler.py	/^dashes = ['-',  # solid line$/;"	v
data	include/logline.h	/^    std::vector<std::string> data;$/;"	m	class:LogLine	typeref:typename:std::vector<std::string>
data	include/sparse_vector.h	/^    std::vector<std::pair<int, double>> data;$/;"	m	class:SparseVector	typeref:typename:std::vector<std::pair<int,double>>
defLW	src/profiler.py	/^defLW = 1.2  # default line width$/;"	v
defMS	src/profiler.py	/^defMS = 7  # default marker size$/;"	v
delim	include/logline.h	/^    char delim;$/;"	m	class:LogLine	typeref:typename:char
directionInfeasible	src/subgradient_instance.cc	/^bool SubgradientInstance::directionInfeasible(const SparseVector& u,$/;"	f	class:SubgradientInstance	typeref:typename:bool
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:0
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:1
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:2
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:3
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:4
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:5
directory	compile_commands.json	/^    "directory": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src",$/;"	s	object:6
dist	src/sparse_vector.cc	/^double SparseVector::dist(const SparseVector& x, const SparseVector& y) {$/;"	f	class:SparseVector	typeref:typename:double
env	include/cplex_instance.h	/^    IloEnv env;$/;"	m	class:CplexInstance	typeref:typename:IloEnv
equal	include/subgradient_instance.h	/^    std::vector<bool> equal;  \/\/ TODO(lugot): CHANGE in classic sparse vector$/;"	m	class:SubgradientInstance	typeref:typename:std::vector<bool>
extractConstraint	src/subgradient_instance.cc	/^void SubgradientInstance::extractConstraint($/;"	f	class:SubgradientInstance	typeref:typename:void
fancy	include/logline.h	/^    bool fancy;$/;"	m	class:LogLine	typeref:typename:bool
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/cplex_instance.cc"/;"	s	object:3
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/instance.cc",$/;"	s	object:2
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/logger.cc",$/;"	s	object:1
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/main.cc",$/;"	s	object:0
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/sparse_matrix.cc",$/;"	s	object:5
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/sparse_vector.cc",$/;"	s	object:6
file	compile_commands.json	/^    "file": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/subgradient_instan/;"	s	object:4
fstar	include/subgradient_instance.h	/^    double fstar, phistar, gap;$/;"	m	class:SubgradientInstance	typeref:typename:double
gap	include/subgradient_instance.h	/^    double fstar, phistar, gap;$/;"	m	class:SubgradientInstance	typeref:typename:double
getSize	src/sparse_vector.cc	/^int SparseVector::getSize() { return this->size; }$/;"	f	class:SparseVector	typeref:typename:int
getStatus	src/instance.cc	/^Instance::SolutionStatus Instance::getStatus() { return status; }$/;"	f	class:Instance	typeref:typename:Instance::SolutionStatus
importModel	src/cplex_instance.cc	/^void CplexInstance::importModel(const std::string& model_name) {$/;"	f	class:CplexInstance	typeref:typename:void
isSolved	src/instance.cc	/^bool Instance::isSolved() {$/;"	f	class:Instance	typeref:typename:bool
isZero	src/sparse_vector.cc	/^bool SparseVector::isZero(int idx) {$/;"	f	class:SparseVector	typeref:typename:bool
lb	include/subgradient_instance.h	/^    std::vector<double> lb, ub;$/;"	m	class:SubgradientInstance	typeref:typename:std::vector<double>
m	include/subgradient_instance.h	/^    int m, n;$/;"	m	class:SubgradientInstance	typeref:typename:int
main	src/main.cc	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	src/profiler.py	/^def main():$/;"	f
markers	src/profiler.py	/^markers = ['+', 'x', 's', '^', 'o', 'd']$/;"	v
model	include/cplex_instance.h	/^    IloModel model;$/;"	m	class:CplexInstance	typeref:typename:IloModel
model_name	include/cplex_instance.h	/^    std::string model_name;$/;"	m	class:CplexInstance	typeref:typename:std::string
model_name	include/subgradient_instance.h	/^    std::string model_name;$/;"	m	class:SubgradientInstance	typeref:typename:std::string
n	include/subgradient_instance.h	/^    int m, n;$/;"	m	class:SubgradientInstance	typeref:typename:int
ncols	include/sparse_matrix.h	/^    int nrows, ncols;$/;"	m	class:SparseMatrix	typeref:typename:int
np	src/profiler.py	/^import numpy as np$/;"	I	nameref:module:numpy
nrows	include/sparse_matrix.h	/^    int nrows, ncols;$/;"	m	class:SparseMatrix	typeref:typename:int
obj	include/cplex_instance.h	/^    IloObjective obj;$/;"	m	class:CplexInstance	typeref:typename:IloObjective
operator *	src/sparse_matrix.cc	/^SparseVector SparseMatrix::operator*(const SparseVector& x) {$/;"	f	class:SparseMatrix	typeref:typename:SparseVector
operator *	src/sparse_vector.cc	/^SparseVector SparseVector::operator*(const SparseMatrix& A) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator *	src/sparse_vector.cc	/^SparseVector SparseVector::operator*(double scalar) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator *	src/sparse_vector.cc	/^double SparseVector::operator*(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:double
operator *=	src/sparse_vector.cc	/^SparseVector SparseVector::operator*=(double scalar) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator +	src/sparse_vector.cc	/^SparseVector SparseVector::operator+(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator +=	src/sparse_vector.cc	/^SparseVector SparseVector::operator+=(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator -	src/sparse_vector.cc	/^SparseVector SparseVector::operator-(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator -=	src/sparse_vector.cc	/^SparseVector SparseVector::operator-=(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:SparseVector
operator <	src/sparse_vector.cc	/^bool SparseVector::operator<(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:bool
operator <<	include/logline.h	/^    friend std::ostream& operator<<(std::ostream& os, const LogLine& line) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/instance.cc	/^std::ostream& operator<<(std::ostream& os, const Instance::SolutionStatus& s) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/sparse_matrix.cc	/^std::ostream& operator<<(std::ostream& os, const SparseMatrix& m) {$/;"	f	typeref:typename:std::ostream &
operator <<	src/sparse_vector.cc	/^std::ostream& operator<<(std::ostream& os, const SparseVector& x) {$/;"	f	typeref:typename:std::ostream &
operator ==	src/sparse_vector.cc	/^bool SparseVector::operator==(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:bool
operator >	src/sparse_vector.cc	/^bool SparseVector::operator>(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:bool
operator >>	include/logline.h	/^    friend LogLine& operator>>(LogLine& line, bool b) {$/;"	f	typeref:typename:LogLine &
operator >>	include/logline.h	/^    friend LogLine& operator>>(LogLine& line, double d) {$/;"	f	typeref:typename:LogLine &
operator >>	include/logline.h	/^    friend LogLine& operator>>(LogLine& line, int i) {$/;"	f	typeref:typename:LogLine &
operator >>	include/logline.h	/^    friend LogLine& operator>>(LogLine& line, std::string str) {$/;"	f	typeref:typename:LogLine &
operator >>	include/logline.h	/^    friend LogLine& operator>>(LogLine& line, std::vector<std::string> v) {$/;"	f	typeref:typename:LogLine &
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/cplex_instance.o/;"	s	object:3
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/instance.o"$/;"	s	object:2
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/logger.o"$/;"	s	object:1
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/main.o"$/;"	s	object:0
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/sparse_matrix.o"$/;"	s	object:5
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/sparse_vector.o"$/;"	s	object:6
output	compile_commands.json	/^    "output": "\/home\/lugot\/documents\/university\/master\/thesis\/code\/src\/subgradient_inst/;"	s	object:4
parseArgs	src/profiler.py	/^	def parseArgs(self):$/;"	m	class:CmdLineParser
phistar	include/subgradient_instance.h	/^    double fstar, phistar, gap;$/;"	m	class:SubgradientInstance	typeref:typename:double
plt	src/profiler.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
prune	src/sparse_vector.cc	/^void SparseVector::prune(double tollerance) {$/;"	f	class:SparseVector	typeref:typename:void
push_back	src/sparse_vector.cc	/^void SparseVector::push_back(std::pair<int, double> p) {$/;"	f	class:SparseVector	typeref:typename:void
push_back	src/sparse_vector.cc	/^void SparseVector::push_back(std::pair<int, double> p, double tollerance) {$/;"	f	class:SparseVector	typeref:typename:void
readTable	src/profiler.py	/^def readTable(fp, delimiter):$/;"	f
rng	include/cplex_instance.h	/^    IloRangeArray rng;$/;"	m	class:CplexInstance	typeref:typename:IloRangeArray
rows	include/sparse_matrix.h	/^    std::vector<SparseVector> rows, cols;$/;"	m	class:SparseMatrix	typeref:typename:std::vector<SparseVector>
saveSolutions	src/subgradient_instance.cc	/^void SubgradientInstance::saveSolutions() {$/;"	f	class:SubgradientInstance	typeref:typename:void
setDelim	include/logline.h	/^    void setDelim(char delim) {$/;"	f	class:LogLine	typeref:typename:void
setFancy	include/logline.h	/^    void setFancy(bool fancy) {$/;"	f	class:LogLine	typeref:typename:void
size	include/sparse_vector.h	/^    int size;$/;"	m	class:SparseVector	typeref:typename:int
solve	src/cplex_instance.cc	/^bool CplexInstance::solve() {$/;"	f	class:CplexInstance	typeref:typename:bool
solve	src/subgradient_instance.cc	/^SubgradientInstance::Status SubgradientInstance::solve(Methods method) {$/;"	f	class:SubgradientInstance	typeref:typename:SubgradientInstance::Status
solveConditional	src/subgradient_instance.cc	/^SubgradientInstance::Status SubgradientInstance::solveConditional() {$/;"	f	class:SubgradientInstance	typeref:typename:SubgradientInstance::Status
solveDeflected	src/subgradient_instance.cc	/^SubgradientInstance::Status SubgradientInstance::solveDeflected() {$/;"	f	class:SubgradientInstance	typeref:typename:SubgradientInstance::Status
solveHybrid	src/subgradient_instance.cc	/^SubgradientInstance::Status SubgradientInstance::solveHybrid() {$/;"	f	class:SubgradientInstance	typeref:typename:SubgradientInstance::Status
solvePure	src/subgradient_instance.cc	/^SubgradientInstance::Status SubgradientInstance::solvePure() {$/;"	f	class:SubgradientInstance	typeref:typename:SubgradientInstance::Status
solveSP	src/subgradient_instance.cc	/^void SubgradientInstance::solveSP(SparseVector* x, const SparseVector& u) {$/;"	f	class:SubgradientInstance	typeref:typename:void
squaredNorm	src/sparse_vector.cc	/^double SparseVector::squaredNorm(const SparseVector& x) {$/;"	f	class:SparseVector	typeref:typename:double
status	include/instance.h	/^    SolutionStatus status;$/;"	m	class:Instance	typeref:typename:SolutionStatus
status	include/subgradient_instance.h	/^    Status status;$/;"	m	class:SubgradientInstance	typeref:typename:Status
ub	include/subgradient_instance.h	/^    std::vector<double> lb, ub;$/;"	m	class:SubgradientInstance	typeref:typename:std::vector<double>
ustar	include/subgradient_instance.h	/^    SparseVector xstar, ustar;$/;"	m	class:SubgradientInstance	typeref:typename:SparseVector
var	include/cplex_instance.h	/^    IloNumVarArray var;$/;"	m	class:CplexInstance	typeref:typename:IloNumVarArray
varindexer	include/subgradient_instance.h	/^    std::map<std::string, int> varindexer;$/;"	m	class:SubgradientInstance	typeref:typename:std::map<std::string,int>
who	src/Makefile	/^who:$/;"	t
wow	src/Makefile	/^wow:$/;"	t
xstar	include/subgradient_instance.h	/^    SparseVector xstar, ustar;$/;"	m	class:SubgradientInstance	typeref:typename:SparseVector
~CplexInstance	src/cplex_instance.cc	/^CplexInstance::~CplexInstance() {$/;"	f	class:CplexInstance
